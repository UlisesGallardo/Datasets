# -*- coding: utf-8 -*-
"""Recommendation system Movies.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17MBvoG_cq8T5UjG0PspfSuRW7CDQ7yzZ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.manifold import MDS
from scipy.cluster import hierarchy
from sklearn.cluster import AgglomerativeClustering

"""
from google.colab import drive
drive.mount('/content/drive')
path = "/content/drive/MyDrive/Colab Notebooks/Machine Learning/Models Based on Distances/Recommendation system Movies/Data/"
"""

dfmovies = pd.read_csv("https://raw.githubusercontent.com/UlisesGallardo/Datasets/main/Recommendation%20system%20Movies/movies_description.txt",sep='|',header=None)
dfscores = pd.read_csv("https://raw.githubusercontent.com/UlisesGallardo/Datasets/main/Recommendation%20system%20Movies/movies_users.txt",sep='\t',header=None)
dfusers = pd.read_csv("https://raw.githubusercontent.com/UlisesGallardo/Datasets/main/Recommendation%20system%20Movies/users_description.txt",sep='|',header=None)
dfmovies.head()

nusers = len(dfusers.values)
nmovies = len(dfmovies.values)
print('nusers',nusers)
print('nmovies',nmovies)

evaluations = np.zeros((nmovies,nusers))+3
evaluations[ dfscores.values[:,1]-1, dfscores.values[:,0]-1 ] = dfscores.values[:,2]

dfevaluations = pd.DataFrame(evaluations,index=dfmovies.values[:,1],columns=np.arange(nusers)+1)
dfevaluations

X = evaluations
model = MDS(n_components=2)
X2 = model.fit_transform(X)

nmovies = len(dfmovies.values)
tmovies = np.array(list(dfevaluations.index))
idusers = dfevaluations.columns
for i in range(nmovies):
    tmovies[i] = tmovies[i][:10]

plt.figure(figsize=(20,20), dpi = 170)
plt.scatter(X2[:,0],X2[:,1],s=1)
for i in range(len(X2)):
    plt.text(X2[i,0],X2[i,1], tmovies[i])
#plt.xlabel(np.round(exp_var[0],3)*100)
#plt.ylabel(np.round(exp_var[1],3)*100)
plt.show()

class myKNeighborsClassifier:
  def __init__(self, k=5):
      self.k = k
      self.Xtrain = None
      self.Ytrain = None
  def fit(self,Xtrain,Ytrain):
      self.Xtrain = Xtrain
      self.Ytrain = Ytrain
  def predict(self,X):
      result = []
      for x in X: 
        distancias = []
        idx = np.where(self.Ytrain == x)[0]
        print(np.where(self.Ytrain == x))
        print(idx)
        xx = self.Xtrain[idx]
        for index, AnotherMovie in enumerate(self.Xtrain):
            if index!= idx:
              a = np.array(self.Xtrain[idx])
              b = np.array(AnotherMovie)
              dis = np.linalg.norm(a-b)
              distancias.append((dis,self.Ytrain[index]))
        distancias.sort(key = lambda x: x[0])
        most_frec = []
        for index, values in enumerate(distancias):
          if index >= self.k: break
          most_frec.append(values[1])
        result.append(most_frec)
      return result

movies = ['Toy Story (1995)'] 

Model = myKNeighborsClassifier()
Model.fit(X2,dfmovies.values[:,1])
Ypredicted = Model.predict(movies)

DF = pd.DataFrame(Ypredicted)
DF

import sys, threading
sys.setrecursionlimit(10**7) # max depth of recursion
threading.stack_size(2**27)  # new thread will get stack of such size

hierarchy.set_link_color_palette(['plum','lightseagreen', 'silver'])

plt.figure(figsize=(100,100),dpi=200)
Z = hierarchy.linkage(X)
dn = hierarchy.dendrogram(Z, labels=tmovies, color_threshold=11)
plt.show()

cluster = AgglomerativeClustering(n_clusters=2, affinity='euclidean', linkage='ward')
cluster.fit_predict(X)